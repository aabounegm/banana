{-|
Module      : Parser
Description : Parses the tokens into an AST

The parser gets fed the token generated by the lexer and generates an AST
  from them representing the program.
-}
module Banana.Syntax.Parser (
  parseType,
  parseVarDecl,
  parseExpr,
  parseVarAssign
) where

import           Banana.Syntax.AST
import           Control.Applicative
import           Text.Parser.Char
import           Text.Parser.Expression
import           Text.Parser.Token
import           Text.Parser.Token.Style
import           Text.Trifecta.Parser

-- | Parse a type
parseType :: Parser Type
parseType = (string "num" >> return Number)
        <|> (string "array" >> do
              space >> whiteSpace
              size <- natural
              whiteSpace
              Array size <$> parseType)

-- | Parse variable declarations
parseVarDecl :: Parser VarDecl
parseVarDecl = do
  string "var" >> space >> whiteSpace
  name <- ident emptyIdents
  whiteSpace >> char ':' >> whiteSpace
  VarDecl name <$> parseType

-- | Parse an arithmetic expression
parseExpr :: Parser (Expr Double)
parseExpr = buildExpressionParser table term

term :: Parser (Expr Double)
term = parens parseExpr
   <|> Var <$> ident emptyIdents
   <|> Lit . toDouble <$> integerOrDouble
    where
      toDouble (Left i)  = fromInteger i
      toDouble (Right d) = d

table :: [[Operator Parser (Expr a)]]
table = [ [binary "*" Mul AssocLeft, binary "/" Div AssocLeft ]
        , [binary "+" Add AssocLeft, binary "-" Sub AssocLeft ]
        ]
-- http://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Expression.html
binary :: String -> (a -> a -> a) -> Assoc -> Operator Parser a
binary  name fun = Infix (fun <$ reservedOp name)
-- prefix :: String -> (a -> a) -> Operator Parser a
-- prefix  name fun = Prefix (fun <$ reservedOp name)
-- postfix :: String -> (a -> a) -> Operator Parser a
-- postfix name fun = Postfix (fun <$ reservedOp name)

reservedOp :: String -> Parser ()
reservedOp = reserve emptyOps

-- | Parse the variable assignment statement
parseVarAssign :: Parser VarAssign
parseVarAssign = do
  var <- ident emptyIdents
  whiteSpace >> string ":=" >> whiteSpace
  VarAssign (Var var) <$> parseExpr
